import discord
from discord.ext import commands
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from datetime import datetime
import time
import random
import os

# C·∫•u h√¨nh bot Discord
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
DISCORD_CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID'))

# C·∫•u h√¨nh Chrome v·ªõi stealth
def setup_driver():
    for attempt in range(3):  # Th·ª≠ 3 l·∫ßn
        try:
            options = Options()  # T·∫°o m·ªõi options m·ªói l·∫ßn th·ª≠
            options.add_argument("--headless")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            options.add_argument(f"--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{random.randint(120, 130)}.0.0.0 Safari/537.36")
            options.binary_location = "/usr/bin/google-chrome"
            driver = uc.Chrome(
                options=options,
                browser_executable_path="/usr/bin/google-chrome",
                version_main=random.randint(120, 130)
            )
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            print(f"Driver kh·ªüi t·∫°o th√†nh c√¥ng (th·ª≠ {attempt + 1})")
            return driver
        except Exception as e:
            print(f"L·ªói kh·ªüi t·∫°o driver (th·ª≠ {attempt + 1}/3): {str(e)}")
            time.sleep(2)
    return None

driver = setup_driver()
if not driver:
    print("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Chrome driver sau 3 l·∫ßn th·ª≠")
    raise Exception("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Chrome driver sau 3 l·∫ßn th·ª≠")

# H√†m t·∫°o progress bar
def create_progress_bar(percentage):
    filled = int(percentage / 10)
    return f"[{'‚ñà' * filled}{' ' * (10 - filled)} {percentage}%]"

# H√†m ki·ªÉm tra link Krnl
def is_krnl_link(url):
    return "krnl" in url.lower()

# H√†m x·ª≠ l√Ω Cloudflare
def handle_cloudflare():
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'cf-browser-verification') or contains(text(), 'Checking your browser')]"))
        )
        step_time = datetime.now()
        WebDriverWait(driver, 30).until(
            lambda d: "success" in d.page_source.lower() or 
                      d.execute_script("return document.readyState") == "complete" and 
                      "cf_clearance" in [cookie['name'] for cookie in d.get_cookies()]
        )
        time.sleep(5)
        return True, (datetime.now() - step_time).total_seconds()
    except:
        return False, 0

# H√†m x·ª≠ l√Ω m·ªôt Linkvertise
def handle_single_linkvertise(linkvertise_count):
    try:
        # B∆∞·ªõc 1: B·∫•m "Agree" n·∫øu c√≥
        try:
            agree_button = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Agree') or contains(text(), 'Accept')]"))
            )
            agree_button.click()
            time.sleep(2)
        except:
            pass

        # B∆∞·ªõc 2: B·∫•m "Get Link"
        get_link_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Get Link')]"))
        )
        get_link_button.click()
        time.sleep(2)

        # B∆∞·ªõc 3: B·∫•m "I'm Interested"
        interested_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Interested')]"))
        )
        interested_button.click()
        time.sleep(2)

        # B∆∞·ªõc 4: B·∫•m "Click Here" ho·∫∑c "Search Now"
        click_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Click Here') or contains(text(), 'Search Now')]"))
        )
        click_button.click()
        time.sleep(2)

        # B∆∞·ªõc 5: ƒê·ª£i 10 gi√¢y
        time.sleep(10)

        # B∆∞·ªõc 6: Back v·ªÅ Linkvertise
        driver.back()
        time.sleep(2)

        # B∆∞·ªõc 7: B·∫•m "I Have Already Completed This Step"
        completed_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'I Have Already Completed This Step')]"))
        )
        completed_button.click()
        time.sleep(2)

        # B∆∞·ªõc 8: ƒê·ª£i 11 gi√¢y
        time.sleep(11)

        # B∆∞·ªõc 9: B·∫•m "Get Link" l·∫ßn n·ªØa
        get_link_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Get Link')]"))
        )
        get_link_button.click()
        time.sleep(2)

        # B∆∞·ªõc 10: B·∫•m "Open"
        open_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Open')]"))
        )
        open_button.click()
        time.sleep(2)

        return True, None
    except Exception as e:
        return False, f"L·ªói Linkvertise {linkvertise_count}: {str(e)}"

# H√†m x·ª≠ l√Ω link v√† l·∫•y key
async def process_link(url, channel):
    if not is_krnl_link(url):
        await channel.send("üö´ Link kh√¥ng ph·∫£i Krnl, b·ªè qua!")
        return

    start_time = datetime.now()
    await channel.send(f"‚è≥ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω link: {url}\n{create_progress_bar(10)}")

    driver.get(url)
    await channel.send(f"üåê ƒê√£ truy c·∫≠p link ({(datetime.now() - start_time).total_seconds():.2f}s)\n{create_progress_bar(20)}")

    linkvertise_count = 0
    max_linkvertise = 4
    max_cloudflare_retries = 3

    while linkvertise_count < max_linkvertise:
        try:
            # X·ª≠ l√Ω Cloudflare
            step_time = datetime.now()
            cf_retries = 0
            while cf_retries < max_cloudflare_retries:
                cf_success, cf_time = handle_cloudflare()
                if cf_success:
                    await channel.send(f"‚úÖ Cloudflare success ({cf_time:.2f}s)\n{create_progress_bar(30)}")
                    break
                else:
                    cf_retries += 1
                    await channel.send(f"‚ùå Cloudflare th·∫•t b·∫°i, retry {cf_retries}/{max_cloudflare_retries}... ({cf_time:.2f}s)\n{create_progress_bar(20)}")
                    driver.refresh()
                    time.sleep(5)
            if cf_retries >= max_cloudflare_retries:
                await channel.send("‚ùå Cloudflare th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠. C·∫ßn can thi·ªáp th·ªß c√¥ng!")
                return

            # B·∫•m "Next Checkpoint" sau Cloudflare success
            next_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Next Checkpoint')]"))
            )
            next_button.click()
            await channel.send(f"‚úÖ ƒê√£ b·∫•m 'Next Checkpoint' ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(40)}")

            # Ki·ªÉm tra l·ªói captcha fail
            if "captcha fail" in driver.page_source.lower():
                await channel.send(f"‚ùå L·ªói: Captcha fail, quay l·∫°i... ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(30)}")
                driver.back()
                time.sleep(2)
                continue

            # X·ª≠ l√Ω Linkvertise
            if "linkvertise" in driver.current_url:
                linkvertise_count += 1
                step_time = datetime.now()
                success, error_msg = handle_single_linkvertise(linkvertise_count)
                if success:
                    await channel.send(f"üîó Ho√†n th√†nh Linkvertise {linkvertise_count}/{max_linkvertise} ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(50 + (linkvertise_count * 10))}")
                else:
                    await channel.send(f"‚ùå {error_msg}. Th·ª≠ l·∫°i... ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(40)}")
                    driver.back()
                    time.sleep(2)
                    continue

            # Ki·ªÉm tra l·ªói "Linkvertise not done"
            if "linkvertise not done" in driver.page_source.lower():
                await channel.send(f"‚ùå L·ªói: Linkvertise ch∆∞a ho√†n th√†nh, th·ª≠ l·∫°i... ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(40)}")
                driver.back()
                time.sleep(2)
                continue

            # T√¨m key n·∫øu kh√¥ng c√≤n "Next Checkpoint"
            if not driver.find_elements(By.XPATH, "//button[contains(text(), 'Next Checkpoint')]"):
                step_time = datetime.now()
                try:
                    key_element = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Your key is')]"))
                    )
                    key = key_element.text
                    await channel.send(f"üéâ L·∫•y ƒë∆∞·ª£c key: **{key}** ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(100)}\nT·ªïng th·ªùi gian: {(datetime.now() - start_time).total_seconds():.2f}s (Ho√†n th√†nh {linkvertise_count} Linkvertise)")
                    break
                except:
                    await channel.send(f"‚ùå Kh√¥ng t√¨m th·∫•y key, th·ª≠ l·∫°i to√†n b·ªô... ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(50)}")
                    break

        except Exception as e:
            await channel.send(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)} ({(datetime.now() - step_time).total_seconds():.2f}s)\n{create_progress_bar(30)}")
            driver.back()
            time.sleep(2)

    else:
        await channel.send("‚ùå ƒê√£ th·ª≠ t·ªëi ƒëa 4 Linkvertise nh∆∞ng kh√¥ng l·∫•y ƒë∆∞·ª£c key. C·∫ßn can thi·ªáp th·ªß c√¥ng!")

# S·ª± ki·ªán Discord: Ch·ªù ng∆∞·ªùi d√πng g·ª≠i link
@bot.event
async def on_message(message):
    if message.channel.id == DISCORD_CHANNEL_ID and message.author != bot.user:
        url = message.content.strip()
        if url.startswith("http"):
            await process_link(url, message.channel)
    await bot.process_commands(message)

# Kh·ªüi ƒë·ªông bot
bot.run(DISCORD_BOT_TOKEN)
